import os
import pandas as pd
import numpy as np
from scipy import sparse
import matplotlib.pyplot as plt
from scipy.sparse.linalg import spsolve


# [convention] Asymmetric Least Squares Smoothing for baseline correction
# Eilers, Paul HC, and Hans FM Boelens. "Baseline correction with asymmetric least squares smoothing." 
# Leiden University Medical Centre Report 1.1 (2005): 5.
def baseline_als(y, lam, p, niter=10):
    L = len(y)
    D = sparse.diags([1, -2, 1], [0, -1, -2], shape=(L, L-2))
    w = np.ones(L)
    for i in range(niter):
        W = sparse.spdiags(w, 0, L, L)
        Z = W + lam * D.dot(D.transpose())
        z = spsolve(Z, w*y)
        w = p * (y > z) + (1-p) * (y < z)
    return z

# Add your folder path here
folder_path = '/Users/myunghyunjeong/Desktop/raw dpt data'

# Update this list with your specific sample file names
specific_samples = ['2_2.0.dpt', '3_3.0.dpt']

def read_dpt_file(file_path):
    try:
        data = pd.read_csv(file_path, sep=None, engine='python', header=None)
        if data.shape[1] < 2:
            print(f"Error: File {file_path} does not contain two columns.")
            return None, None
        wavenumbers = data.iloc[:, 0]
        transmittance = data.iloc[:, 1]
        return wavenumbers, transmittance
    except Exception as e:
        print(f"An error occurred while reading {file_path}: {e}")
        return None, None

def plot_juxtaposed_spectra(samples_data, title, folder_path):
    plt.figure(figsize=(10, 4))
    for sample_name, (wavenumbers, transmittance) in samples_data.items():
        # Apply baseline correction
        baseline = baseline_als(transmittance, 10**5, 0.001, niter=10)
        corrected_transmittance = transmittance - baseline
        plt.plot(wavenumbers, corrected_transmittance, label=sample_name + ' corrected')
    plt.xlabel('Wavenumber (cm^-1)')
    plt.ylabel('Transmittance')
    plt.title(title)
    plt.legend()
    plt.gca().invert_xaxis()  # Invert the x-axis
    plt.gca().invert_yaxis()  # Invert the y-axis
    save_path = os.path.join(folder_path, title + '.jpg')
    plt.savefig(save_path, format='jpg', dpi=300)
    plt.close()

# Read and store data for specific samples
samples_data = {}
for file_name in specific_samples:
    file_path = os.path.join(folder_path, file_name)
    wavenumbers, transmittance = read_dpt_file(file_path)
    if wavenumbers is not None and transmittance is not None:
        samples_data[file_name] = (wavenumbers, transmittance)
    else:
        print(f"Skipping file {file_name} due to read error.")

# Plot juxtaposed spectra if we have data for both samples
if len(samples_data) == 2:
    plot_juxtaposed_spectra(samples_data, 'Juxtaposition of Samples 2 and 3', folder_path)
